<?xml version="1.0" encoding="utf-8"?>
<topic id="2c021ae7-77a1-46d5-83d8-2aac5bad5adb" revisionNumber="1">
  <developerConceptualDocument
     xmlns       ="http://ddue.schemas.microsoft.com/authoring/2003/5"
     xmlns:xlink ="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
      </para>
    </introduction>

    <section address="Section1">
      <title>IterationLimit {integer}</title>
      <content>
        <para>
          When a rule in the ini file matches -- for example when the
          URL matches the pattern in a
          <codeInline>RewriteRule</codeInline>, or a
          <codeInline>RewriteHeader</codeInline> directive -- the
          default behavior of IIRF is to loop - to apply the rules
          again, starting at the first rule in the ini file.  IIRF does
          this iteratively, until no pattern matches, or until the limit
          specified by this directive is reached.  In other words, if a
          <codeInline>RewriteRule</codeInline> or a
          <codeInline>RewriteHeader</codeInline> fires, the output is
          processed again, as a new incoming URL, subject to this limit.
        </para>

        <para>
          This behavior can be modified using the [L] flag on a
          directive. See the notes regarding rule modifers in the
          documentation for
          <link xlink:href="bdaf0dbe-e539-4bf5-9231-1dae3b0e27a5">RewriteRule</link>
          for more information.
        </para>

        <para>
          The <codeInline>IterationLimit</codeInline> ini-file directive
          specifies how many times the rewrite filter will loop on a
          single URL request. After a URL has been transformed
          successfully, the result will be run through the IIRF rules
          again, to be potentially transformed again.  This continues
          for a single URL request, as long as a rule applies to the
          URL, or until the <codeInline>IterationLimit</codeInline> is
          exceeded. A value of 0 (zero) for
          <codeInline>IterationLimit</codeInline> implies no iteration
          at all.  The incoming URL request is processed through the
          ruleset just once.
        </para>

        <para>
          The <codeInline>IterationLimit</codeInline> threshold does not
          consider which particular rules fired successfully.  The
          threshold applies to the number of passes through the rules,
          during which <legacyItalic>any</legacyItalic> rule fires. If a
          URL matches any rule, then the rule is applied, the iteration
          count is incremented, and if the threshold has not been
          exceeded, the IIRF engine does another pass on the complete
          set of rules.
        </para>

        <para>Example:</para>

          <code lang="ini">
          IterationLimit 5
          RewriteRule ^/([^0-9]*)$    /1/$1
          RewriteRule ^/1/([^0-9]*)$  /2/$1
          RewriteRule ^/2/([^0-9]*)$  /3/$1
          RewriteRule ^/3/([^0-9]*)$  /4/$1
          RewriteRule ^/4/([^0-9]*)$  /5/$1
          RewriteRule ^/5/([^0-9]*)$  /6/$1
          RewriteRule ^/6/([^0-9]*)$  /7/$1
          RewriteRule ^/7/([^0-9]*)$  /8/$1
          RewriteRule ^/8/([^0-9]*)$  /9/$1
          </code>

        <para>Given the above set of rules, you will get these results:
        </para>

        <table>
          <tableHeader>
            <row>
              <entry>incoming request</entry>
              <entry>rewritten URL</entry>
            </row>
          </tableHeader>
          <row>
            <entry>/index.html</entry>
            <entry>/6/index.html</entry>
          </row>
          <row>
            <entry>/1/index.html</entry>
            <entry>/7/index.html</entry>
          </row>
          <row>
            <entry>/2/index.html</entry>
            <entry>/8/index.html</entry>
          </row>
          <row>
            <entry>/7/index.html</entry>
            <entry>/9/index.html</entry>
          </row>
        </table>

        <para>
          Each rule in this set rewrites the output of the previous
          rule, so that they form a cascade. But
          with <codeInline>IterationLimit</codeInline> set to 5, the
          rewriting stops after 5 rewrites.
        </para>

        <para>
          The <codeInline>IterationLimit</codeInline> is intended as a
          fail-safe mechanism.  Consider the simplest case: It is
          possible to create a rewrite rule that generates an output
          that matches its own input pattern.  The effect is a logical
          infinite loop or cycle.  It is also possible to have more complex
          cycle, for example the output of one rule matches the input of
          another rule, and the output of the second rule matches the
          input of the first.
        </para>

        <para>
          With an infinite loop or cycle in your rules,
          and without an <codeInline>IterationLimit</codeInline>, the
          ISAPI filter would loop infinitely, and resulting in a stack
          overflow, and a denial-of-service in IIS.
        </para>

        <para>
          The simple solution would be: <legacyItalic>don&apos;t design
          sets of rules that induce loops.</legacyItalic> But sometimes
          it can be difficult to determine if a loop might
          occur. The <codeInline>IterationLimit</codeInline> removes the
          potential for this infinite loop.
        </para>

        <para>
          The range of valid values
          for <codeInline>IterationLimit</codeInline> is 0 to 30, and
          the default limit for iterations is 8.  If you specify
          an <codeInline>IterationLimit</codeInline> out of this range,
          the default value of 8 will be used, and a warning message
          will be logged in the log file.
        </para>

        <para>
          The default applies if you do
          not specify an <codeInline>IterationLimit</codeInline>
          directive in the ini file.  The default may
          or may not be suitable for any particular deployment.  It is not
          likely that you will need more iterations, but if you do, change
          the limit with the <codeInline>IterationLimit</codeInline> directive.
        </para>

        <para>
          You should set this at most once in the ini file, or any
          included ini files. If there is more than one occurrence,
          you&apos;ll get a warning.
        </para>

        <alert class='note'>
          <list class="ordered">
            <listItem>
              The iterating behavior described here does not apply to
              <link xlink:href="c699ba60-fe15-4e90-ac4b-74598b5c352e">RedirectRule</link> or
              <link xlink:href="d9d3d4d7-7b3a-4418-b290-c297b041ff42">ProxyPass</link>
              directives.  This is because either of those rules, when
              applied, will cause the current request to be completely
              handled.
            </listItem>

            <listItem>
              The iterative behavior of IIRF described here differs from
              that of the Apache mod_rewrite module.  In the Apache module,
              when a rewrite occurs, rule processing continues with the
              next rule in the ini file.  In IIRF, rule processing starts
              at the top.  For more information, see the <codeInline>Chain
                | C</codeInline> modifer for Apache mod_proxy.
            </listItem>
          </list>
        </alert>

      </content>
    </section>

  </developerConceptualDocument>
</topic>




