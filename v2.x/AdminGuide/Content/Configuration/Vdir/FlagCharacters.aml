<?xml version="1.0" encoding="utf-8"?>
<topic id="e49a6636-15bd-470a-98b3-e50532c684db" revisionNumber="1">
  <developerConceptualDocument
     xmlns       ="http://ddue.schemas.microsoft.com/authoring/2003/5"
     xmlns:xlink ="http://www.w3.org/1999/xlink">
    <!--
        <summary>
          <para>Optional summary abstract</para>
        </summary>
        -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>
      </para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->

    <section address="Section1">

      <title>Basic Syntax and Usage</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
             <autoOutline /> -->
        <para>Syntax:
          <code lang="ini">
            FlagCharacters  &lt;c1&gt; &lt;c2&gt;
          </code>
        </para>

        <para>
          When appearing in your ini file, &lt;c1&gt; &lt;c2&gt; should be replaced
          with single characters, one of the following: % @ * _ ^ ! ~ #
        </para>

        <para>
          This directive allows you to specify alternate flag characters for special
          features available in the IIRF replacement string.  The directive takes 2
          arguments, each one a character that will be used in replacement strings
          to access that particular feature.
        </para>

        <para>
          The first character, c1, is the one that will indicate, in replacement
          strings, a reference to a back-reference to a group in the associated
          <inlineCode>RewriteCond</inlineCode> statement. Apache&apos;s mod_rewrite
          uses the % character to denote numbered back-references to groups in the
          <inlineCode>RewriteCond</inlineCode>.  But back-references of the form %n
          can be confused with URL-escaped characters you would like to include
          directly into the replacement pattern.  By default in IIRF this character
          is *, which is different than the default in Apache&apos;s mod_rewrite.
        </para>

        <para>
          For example, a replacement pattern might look like <code lang="ini">
            /results?query=http%3A%2F%2Fserver%2Fpage.asp%3Farg=%2
          </code>
          The %3A%2F%2F is really meant to be :// - it is url escaped.
          But if you use % as the character for back-references, the %3
          sequence looks like a back-reference to a matched substring
          from the most recently matched
          <codeInline>RewriteCond</codeInline> statement. It&apos;s
          ambiguous.  When there is no third substring, IIRF just passes
          the %3 through, so the %3A works as desired, representing the
          colon character in the output.  But if there is a third
          substring, then it will be injected at that point, and you
          won&apos;t get what you want. This is why the default is * in
          IIRF. On the other hand you may wish to use the same syntax as
          does Apache mod_rewrite. You can use this directive to revert
          to the behavior in mod_rewrite.
        </para>

        <para>
          The second character, c2, is the one that will indicate, in
          replacement strings, a case-folding opcode, or a url-encoding
          opcode. In IIRF, the default character for this feature is #. The
          default character can be confused with the character that precedes
          anchors in HTTP URLs, which is why it is settable with this directive.
          Using this directive, you could specify ~ , and then use <literal>~L
          ~U ~E ~l ~u </literal> in replacement strings to do case folding,
          instead of <literal>#L #U #E #l #u </literal>. In this case you would
          also use <literal>~X ~E </literal> instead of <literal>#X #E
          </literal> to do url encoding.
        </para>

        <para>
          See <link xlink:href="bdaf0dbe-e539-4bf5-9231-1dae3b0e27a5">the
          documentation for RewriteRule</link> for a detailed explanation of the
          case-folding and url-encoding features available in the replacement string
          for rules.
        </para>

        <para>
          You should use this directive at most once in the ini file, or any
          included ini files. If there is more than one occurrence, you&apos;ll get
          a warning.  If the directive is not present, then IIRF uses * (asterisk)
          for <codeInline>c1</codeInline> and # (octothorpe) for
          <codeInline>c2</codeInline>. You should not use the <link
          xlink:href="4c7e4d84-6177-4cde-8bbb-3ffe37bcb84c">CondSubstringBackrefFlag</link>
          if you are using this directive. You need only one or the other; this
          directive supercedes that one.
        </para>

        <para>Example:  <markup>
            <br/>
          </markup>
          when using this directive:
          <code lang="ini">
            FlagCharacters ~ @
          </code>
          ...then a replacement string like the following will append the 2nd
          matched substring from the most recently evaluated RewriteCond, at the end
          of the URL, and it will be downcased. Also, all the sequences like %3F
          will be treated as URL-escaped, as intended: <code lang="ini">

            /results?query=http%3A%2F%2Fserver%2Fpage.asp%3Farg=@L~2@E
          </code>
        </para>

        <para>Be careful using % as the back-reference character. It&apos;s
          supported only for compatibility with mod_rewrite, but it
          can lead to confusion.
        </para>

      </content>
    </section>

    <relatedTopics>
      <!-- CondSubstringBackrefFlag -->
      <link xlink:href="4c7e4d84-6177-4cde-8bbb-3ffe37bcb84c"/>
    </relatedTopics>

  </developerConceptualDocument>
</topic>


